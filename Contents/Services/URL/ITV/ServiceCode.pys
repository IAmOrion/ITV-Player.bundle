import re
import datetime

def NormalizeURL(url):
	return url

def MetadataObjectForURL(url):
	content = HTML.ElementFromURL(url, errors='ignore', cacheTime=1800)
	mytitle = content.xpath('//meta[@property="og:title"]/@content')[0]
	mysummary = content.xpath('//meta[@property="og:description"]/@content')[0]
	myimage = content.xpath('//meta[@property="og:image"]/@content')[0]

	return VideoClipObject(
			title = mytitle,
			summary = mysummary,
			source_title = "ITV Player",
			thumb = myimage
		)

def MediaObjectsForURL(url):
	ret = []
	ret.append(
		MediaObject(
			protocol = 'rtmp',
			audio_channels = 2,
			bitrate = 1200,
			parts = [PartObject(key=Callback(PlayVideo, url=url))]
		)
	)
	
  	return ret

@indirect
def PlayVideo(url):

	content = HTML.ElementFromURL(url, errors='ignore', cacheTime=1800)
	productionID = content.xpath('//div[@id="video"]/@data-video-id')[0]

	SM_TEMPLATE = """
	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/" xmlns:itv="http://schemas.datacontract.org/2004/07/Itv.BB.Mercury.Common.Types" xmlns:com="http://schemas.itv.com/2009/05/Common">
	  <soapenv:Header/>
	  <soapenv:Body>
		<tem:GetPlaylist>
		  <tem:request>
		<itv:ProductionId>%s</itv:ProductionId>
		<itv:RequestGuid>FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF</itv:RequestGuid>
		<itv:Vodcrid>
		  <com:Id/>
		  <com:Partition>itv.com</com:Partition>
		</itv:Vodcrid>
		  </tem:request>
		  <tem:userInfo>
		<itv:Broadcaster>Itv</itv:Broadcaster>
		<itv:GeoLocationToken>
		  <itv:Token/>
		</itv:GeoLocationToken>
		<itv:RevenueScienceValue>ITVPLAYER.12.18.4</itv:RevenueScienceValue>
		<itv:SessionId/>
		<itv:SsoToken/>
		<itv:UserToken/>
		  </tem:userInfo>
		  <tem:siteInfo>
		<itv:AdvertisingRestriction>None</itv:AdvertisingRestriction>
		<itv:AdvertisingSite>ITV</itv:AdvertisingSite>
		<itv:AdvertisingType>Any</itv:AdvertisingType>
		<itv:Area>ITVPLAYER.VIDEO</itv:Area>
		<itv:Category/>
		<itv:Platform>DotCom</itv:Platform>
		<itv:Site>ItvCom</itv:Site>
	  </tem:siteInfo>
	  <tem:deviceInfo>
		<itv:ScreenSize>Big</itv:ScreenSize>
	  </tem:deviceInfo>
	  <tem:playerInfo>
		<itv:Version>2</itv:Version>
	  </tem:playerInfo>
		</tem:GetPlaylist>
	  </soapenv:Body>
	</soapenv:Envelope>
	"""

	SoapMessage = SM_TEMPLATE%(productionID)

	headers = {
		"Host":"mercury.itv.com",
		"Referer":"http://www.itv.com/mercury/Mercury_VideoPlayer.swf?v=1.6.479/[[DYNAMIC]]/2",
		"Content-type":"text/xml; charset=utf-8",
		"Content-length":"%d" % len(SoapMessage),
		"SOAPAction":"http://tempuri.org/PlaylistService/GetPlaylist"
	}

	res = HTTP.Request("http://mercury.itv.com/PlaylistService.svc", headers=headers, data=SoapMessage).content
	#Log(res)

	title1= res.split("<ProgrammeTitle>")
	#Log(title1)

	title2= title1[1].split("</ProgrammeTitle>")

	match2 = re.findall(ur'<PosterFrame>.*?<URL><\!\[CDATA\[(.*?)\].*?</PosterFrame>', res, flags=re.DOTALL)
	if match2:
		thumbfile = match2[0]
	else:
		thumbfile = None

	res = re.search('<VideoEntries>.+?</VideoEntries>', res, re.DOTALL).group(0)
	rendition_offset= res.split("rendition-offset=")
	offset_seconds = rendition_offset[1].split(":")
	offset = int(offset_seconds[2])

	mediafile =  res.split("<MediaFile delivery=")

	for index in range(len(mediafile)):
		#Log(("MEDIA ENTRY %d %s"),index, mediafile[index])
		pass

	quality = 4
	max_available_quality = len(mediafile)
	selected_stream = min(quality, max_available_quality)

	rtmp = re.compile('(rtmp[^"]+)').findall(res)[0]
	playpath = re.compile('(mp4:[^\]]+)').findall(mediafile[selected_stream])[0]
	rtmp = rtmp.replace('&amp;','&')


	return IndirectResponse(VideoClipObject,
		key = RTMPVideoURL(
			url = rtmp,
			clip = playpath,
			swf_url = 'http://www.itv.com/mercury/Mercury_VideoPlayer.swf'
		)
	)
