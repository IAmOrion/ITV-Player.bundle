import re
import datetime
import json

def NormalizeURL(url):
	return url

def MetadataObjectForURL(url):
	content = HTML.ElementFromURL(url, errors='ignore', cacheTime=1800)
	mytitle = content.xpath('//meta[@property="og:title"]/@content')[0]
	mysummary = content.xpath('//meta[@property="og:description"]/@content')[0]
	myimage = content.xpath('//meta[@property="og:image"]/@content')[0]

	return VideoClipObject(
			title = mytitle,
			summary = mysummary,
			source_title = "ITV Player",
			thumb = myimage
		)

@deferred
def MediaObjectsForURL(url):

	content = HTML.ElementFromURL(url, errors='ignore', cacheTime=1800)
	productionID = content.xpath('//div[@id="video"]/@data-video-autoplay-id')[0]
	iosPlaylistUrl = content.xpath('//div[@id="video"]/@data-video-id')[0]
	hmac = content.xpath('//div[@id="video"]/@data-video-hmac')[0]
		
	headers = {
		"Accept": "application/vnd.itv.vod.playlist.v2+json",
		"Content-type": "application/json; charset=utf-8",
		"hmac": hmac.upper()
	}

	JsonMessage = json.dumps({
		'user': {
			'itvUserId': '',
			'entitlements': [],
			'token': ''
		},
		'device': {
			'manufacturer': 'Safari',
			'model': '5',
			'os': {
			    'name': 'Windows NT',
			    'version': '6.1',
			    'type': 'desktop'
			}
		},
		'client': {
			'version': '4.1',
			'id': 'browser'
		},
		'variantAvailability': {
			'featureset': {
			    'min': ['hls', 'aes', 'outband-webvtt'],
			    'max': ['hls', 'aes', 'outband-webvtt']
			},
			'platformTag': 'dotcom'
		}
	}).encode()
	Log(iosPlaylistUrl)
	Log(headers)
	Log(JsonMessage)
	res = HTTP.Request(iosPlaylistUrl, headers=headers, data=JsonMessage).content
	Log(res)
	jsonres = json.loads(res)
	videoData = jsonres.get('Playlist', {}).get('Video', {})
	iosBaseUrl = videoData.get('Base')
	parts = []

	for mediaFile in videoData.get('MediaFiles', []):
		href = mediaFile.get('Href')
		if not href:
			continue
		if iosBaseUrl:
			href = iosBaseUrl + href
			Log(href)
			if Client.Product in ['Plex Web'] and Client.Platform not in ['Safari']:
				parts.append(PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=href))))
			else:
				parts.append(PartObject(key=HTTPLiveStreamURL(href)))
				

	return [
		MediaObject(
			parts = parts, 
			optimized_for_streaming = True
			)
		]

def PlayVideo(url):
	return HTTP.Request(url).content
