import reimport datetimedef NormalizeURL(url):	return urldef MetadataObjectForURL(url):	content = HTML.ElementFromURL(url, errors='ignore', cacheTime=1800)	element = content.xpath("//div[@class='hero']")[0]	id = url	if len(element.xpath(".//div[contains(@class, 'node-episode')]/a[1]/@href")) > 0:		id = ITV_URL + element.xpath(".//div[contains(@class, 'node-episode')]/a[1]/@href")[0]	elif len(element.xpath("./a")) > 0:		id = ITV_URL + element.xpath("./a[1]/@href")[0]	title = 'Unknown'	if len(element.xpath("//*[@property='dc:title']")) > 0:		title = element.xpath("//*[@property='dc:title']")[0].text.strip()	seasonNumber = ''	if len(element.xpath(".//div[contains(@class, 'field-name-field-season-number')]//text()")) > 0:		seasonNumber = element.xpath(".//div[contains(@class, 'field-name-field-season-number')]//text()")[0]		title += "(Season: " + seasonNumber		episodeNumber = ''		if len(element.xpath(".//div[contains(@class, 'field-name-field-episode-number')]//text()")) > 0:			episodeNumber = element.xpath(".//div[contains(@class, 'field-name-field-episode-number')]//text()")[0]			title += ", Ep.: " + episodeNumber		title += ")"	daysRemaining = None	if len(element.xpath(".//div[@class='offer-duration']")) > 0:		daysRemaining = re.search("(\\d*)",element.xpath(".//div[@class='offer-duration']")[0].text.strip()).groups()[0]	shortSynopsis = ''	if len(element.xpath(".//div[contains(@class,'field-name-field-short-synopsis')]//text()")) > 0:		shortSynopsis = element.xpath(".//div[contains(@class,'field-name-field-short-synopsis')]//text()")[0]	duration = None	if len(element.xpath(".//div[contains(@class, 'field-name-field-duration')]//text()")) > 0:		res = re.search(			"(?:(?:(\\d+)(?:\s*hours?\s*))|(?:(\\d+)(?:\s*minutes?))){1,2}",			" ".join(element.xpath(".//div[contains(@class, 'field-name-field-duration')]//text()")).strip()		)		if res:			duration = (int(res.groups()[0]) if res.groups()[0] else 0) * 60			duration += (int(res.groups()[1]) if res.groups()[1] else 0)	lastBroadcast = datetime.datetime.strptime(		element.xpath(".//div[contains(@class, 'field-name-field-broadcastdate')]//span/@content")[0][:-6],		'%Y-%m-%dT%H:%M:%S'	)	posterFrameUri = None	if len(element.xpath(".//div[contains(@class,'field-name-field-image')]//img/@src")) > 0:		posterFrameUri = element.xpath(".//div[contains(@class,'field-name-field-image')]//img/@src")[0]	elif len(element.xpath(".//param[@name='poster']")) > 0:		posterFrameUri = element.xpath(".//param[@name='poster']/@value")[0]	if posterFrameUri:		posterFrameUri = posterFrameUri.replace('player_image_thumb_standard','posterframe')	return VideoClipObject(			title = title,			summary = shortSynopsis,			thumb = posterFrameUri,			originally_available_at = lastBroadcast,			duration = duration * 60 * 1000,			source_title = "ITV Player",		)def MediaObjectsForURL(url):	ret = []	ret.append(		MediaObject(			protocol = 'rtmp',			audio_channels = 2,			bitrate = 1200,			parts = [PartObject(key=Callback(PlayVideo, url=url))]		)	)	  	return ret@indirectdef PlayVideo(url):	Log('=============================================================== ' + url)	# Borrowed from XBMC ITV Plugin and reworked for Plex	html = HTTP.Request(url).content	html = re.sub('&#039;','\'',html)	#Log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")	if re.search('"title":"This episode is no longer available."',html):		raise Exception("Sorry This episode is no longer available")	match1 = re.findall(ur'"productionId":"(.*?)",', html, flags=re.DOTALL)	if match1:		productionID = match1[0]		productionID=re.sub('\\\\','',productionID)	else:		Log("NO PRODUCTION ID ")	#Log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")	#Log("Production ID is %s" % productionID)	SM_TEMPLATE = """	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/" xmlns:itv="http://schemas.datacontract.org/2004/07/Itv.BB.Mercury.Common.Types" xmlns:com="http://schemas.itv.com/2009/05/Common">	  <soapenv:Header/>	  <soapenv:Body>		<tem:GetPlaylist>		  <tem:request>		<itv:ProductionId>%s</itv:ProductionId>		<itv:RequestGuid>FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF</itv:RequestGuid>		<itv:Vodcrid>		  <com:Id/>		  <com:Partition>itv.com</com:Partition>		</itv:Vodcrid>		  </tem:request>		  <tem:userInfo>		<itv:Broadcaster>Itv</itv:Broadcaster>		<itv:GeoLocationToken>		  <itv:Token/>		</itv:GeoLocationToken>		<itv:RevenueScienceValue>ITVPLAYER.12.18.4</itv:RevenueScienceValue>		<itv:SessionId/>		<itv:SsoToken/>		<itv:UserToken/>		  </tem:userInfo>		  <tem:siteInfo>		<itv:AdvertisingRestriction>None</itv:AdvertisingRestriction>		<itv:AdvertisingSite>ITV</itv:AdvertisingSite>		<itv:AdvertisingType>Any</itv:AdvertisingType>		<itv:Area>ITVPLAYER.VIDEO</itv:Area>		<itv:Category/>		<itv:Platform>DotCom</itv:Platform>		<itv:Site>ItvCom</itv:Site>	  </tem:siteInfo>	  <tem:deviceInfo>		<itv:ScreenSize>Big</itv:ScreenSize>	  </tem:deviceInfo>	  <tem:playerInfo>		<itv:Version>2</itv:Version>	  </tem:playerInfo>		</tem:GetPlaylist>	  </soapenv:Body>	</soapenv:Envelope>	"""	SoapMessage = SM_TEMPLATE%(productionID)	headers = {		"Host":"mercury.itv.com",		"Referer":"http://www.itv.com/mercury/Mercury_VideoPlayer.swf?v=1.6.479/[[DYNAMIC]]/2",		"Content-type":"text/xml; charset=utf-8",		"Content-length":"%d" % len(SoapMessage),		"SOAPAction":"http://tempuri.org/PlaylistService/GetPlaylist"	}	res = HTTP.Request("http://mercury.itv.com/PlaylistService.svc", headers=headers, data=SoapMessage).content	#Log(res)	title1= res.split("<ProgrammeTitle>")	#Log(title1)	title2= title1[1].split("</ProgrammeTitle>")	match2 = re.findall(ur'<PosterFrame>.*?<URL><\!\[CDATA\[(.*?)\].*?</PosterFrame>', res, flags=re.DOTALL)	if match2:		thumbfile = match2[0]	else:		thumbfile = None	res = re.search('<VideoEntries>.+?</VideoEntries>', res, re.DOTALL).group(0)	rendition_offset= res.split("rendition-offset=")	offset_seconds = rendition_offset[1].split(":")	offset = int(offset_seconds[2])	mediafile =  res.split("<MediaFile delivery=")	for index in range(len(mediafile)):		#Log(("MEDIA ENTRY %d %s"),index, mediafile[index])		pass	quality = 4	max_available_quality = len(mediafile)	selected_stream = min(quality, max_available_quality)	rtmp = re.compile('(rtmp[^"]+)').findall(res)[0]	playpath = re.compile('(mp4:[^\]]+)').findall(mediafile[selected_stream])[0]	rtmp = rtmp.replace('&amp;','&')	return IndirectResponse(VideoClipObject,		key = RTMPVideoURL(			url = rtmp,			clip = playpath,			swf_url = 'http://www.itv.com/mercury/Mercury_VideoPlayer.swf'		)	)